#include <SFML/Graphics.hpp>
#include <iostream>

const int WIDTH = 800;
const int HEIGHT = 600;
const int PADDLE_WIDTH = 100;
const int PADDLE_HEIGHT = 20;
const int PADDLE_SPEED = 5;
const int BALL_RADIUS = 10;
const int BALL_SPEED = 3;
const int BRICKS_ROWS = 5;
const int BRICKS_COLUMNS = 10;
const int BRICK_WIDTH = 75;
const int BRICK_HEIGHT = 20;

struct Paddle {
    sf::RectangleShape shape;
    sf::Vector2f velocity;

    Paddle(float startX, float startY) {
        shape.setPosition(startX, startY);
        shape.setSize(sf::Vector2f(PADDLE_WIDTH, PADDLE_HEIGHT));
        shape.setFillColor(sf::Color::Green);
        velocity.x = 0;
        velocity.y = 0;
    }

    void update() {
        shape.move(velocity);
        if (shape.getPosition().x < 0)
            shape.setPosition(0, shape.getPosition().y);
        else if (shape.getPosition().x + PADDLE_WIDTH > WIDTH)
            shape.setPosition(WIDTH - PADDLE_WIDTH, shape.getPosition().y);
    }
};

struct Ball {
    sf::CircleShape shape;
    sf::Vector2f velocity;

    Ball(float startX, float startY) {
        shape.setPosition(startX, startY);
        shape.setRadius(BALL_RADIUS);
        shape.setFillColor(sf::Color::Red);
        velocity.x = BALL_SPEED;
        velocity.y = -BALL_SPEED;
    }

    void update() {
        shape.move(velocity);
        if (shape.getPosition().x < 0 || shape.getPosition().x + BALL_RADIUS * 2 > WIDTH)
            velocity.x = -velocity.x;
        if (shape.getPosition().y < 0)
            velocity.y = -velocity.y;
    }

    bool isColliding(const sf::RectangleShape& rect) {
        return shape.getGlobalBounds().intersects(rect.getGlobalBounds());
    }
};

struct Brick {
    sf::RectangleShape shape;
    bool destroyed;

    Brick(float startX, float startY) {
        shape.setPosition(startX, startY);
        shape.setSize(sf::Vector2f(BRICK_WIDTH, BRICK_HEIGHT));
        shape.setFillColor(sf::Color::Yellow);
        destroyed = false;
    }
};

int main() {
    sf::RenderWindow window(sf::VideoMode(WIDTH, HEIGHT), "Breakout");
    window.setFramerateLimit(60);

    Paddle paddle(WIDTH / 2 - PADDLE_WIDTH / 2, HEIGHT - PADDLE_HEIGHT - 10);
    Ball ball(WIDTH / 2, HEIGHT / 2);

    std::vector<Brick> bricks;
    for (int i = 0; i < BRICKS_ROWS; ++i) {
        for (int j = 0; j < BRICKS_COLUMNS; ++j) {
            bricks.emplace_back((BRICK_WIDTH + 5) * j + 30, (BRICK_HEIGHT + 5) * i + 50);
        }
    }

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
            paddle.velocity.x = -PADDLE_SPEED;
        else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
            paddle.velocity.x = PADDLE_SPEED;
        else
            paddle.velocity.x = 0;

        paddle.update();
        ball.update();

        if (ball.isColliding(paddle.shape))
            ball.velocity.y = -ball.velocity.y;

        for (auto& brick : bricks) {
            if (!brick.destroyed && ball.isColliding(brick.shape)) {
                brick.destroyed = true;
                ball.velocity.y = -ball.velocity.y;
            }
        }

        window.clear(sf::Color::Black);

        window.draw(paddle.shape);
        window.draw(ball.shape);

        for (auto& brick : bricks) {
            if (!brick.destroyed)
                window.draw(brick.shape);
        }

        window.display();
    }

    return 0;
}